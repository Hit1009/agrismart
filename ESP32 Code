#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <addons/TokenHelper.h>
#include <addons/RTDBHelper.h>
#include "DHT.h"

#define DHTPIN 2
#define IRSensor 15
#define DHTTYPE DHT11
#define WIFI_SSID "esp"
#define WIFI_PASSWORD "12345678"
#define API_KEY "<Confidential>"
#define DATABASE_URL ""<Confidential>"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
DHT dht(DHTPIN, DHTTYPE);

unsigned long sendDataPrevMillis = 0;
bool signupOK = false;
int _moisture, sensor_analog;
const int sensor_pin = 39; /* Soil moisture sensor O/P pin */
int sensorPin = 4; //waterflow sensor
volatile long pulse;
float volume;

void setup() {
  Serial.begin(115200);
  pinMode(sensorPin, INPUT);
  pinMode(IRSensor, INPUT);
  attachInterrupt(digitalPinToInterrupt(sensorPin), increase, RISING);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.println(".");
    delay(300);
  }
  Serial.print("Connected");
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("signup ok");
    signupOK = true;
  } else {
    //Serial.println("%s\n",config.signer.signupError.message.c_str());
  }
  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  dht.begin();
}

void loop() {
  int sensorStatus = digitalRead(IRSensor);  // Set the GPIO as Input
  if (sensorStatus == 1)                     // Check if the pin high or not
  {
    Serial.println("No Motion!");  // print Motion Detected! on the serial monitor window
  } else {
    Serial.println("Motion Detected!");  // print Motion Ended! on the serial monitor window
  }

  volume = 2.663 * pulse;
  Serial.print(volume);
  Serial.println(" mL");
  sensor_analog = analogRead(sensor_pin);
  Serial.print(sensor_analog);
  _moisture = (((sensor_analog / 2200.00) * 100));
  Serial.print("Moisture = ");
  Serial.print(_moisture);
  Serial.println("%");
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("Â°C "));
  if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 5000 || sendDataPrevMillis == 0)) {
    sendDataPrevMillis = millis();
    if (Firebase.RTDB.setInt(&fbdo, "water_volume", volume)) {
      Serial.println();
      Serial.print("Saved to" + fbdo.dataPath());
      Serial.println(" (" + fbdo.dataType() + ")");
    } else {
      Serial.println("Failed:" + fbdo.errorReason());
    }
    if (Firebase.RTDB.setInt(&fbdo, "Soil_Moisture", _moisture)) {
      Serial.println();
      Serial.print("Saved to" + fbdo.dataPath());
      Serial.println(" (" + fbdo.dataType() + ")");
    } else {
      Serial.println("Failed:" + fbdo.errorReason());
    }
    if (Firebase.RTDB.setInt(&fbdo, "Temperature:", t)) {
      Serial.println();
      Serial.print("Saved to" + fbdo.dataPath());
      Serial.println(" (" + fbdo.dataType() + ")");
    } else {
      Serial.println("Failed:" + fbdo.errorReason());
    }
    if (Firebase.RTDB.setInt(&fbdo, "Humidity", h)) {
      Serial.println();
      Serial.print("Saved to" + fbdo.dataPath());
      Serial.println(" (" + fbdo.dataType() + ")");
    } else {
      Serial.println("Failed:" + fbdo.errorReason());
    }
    if (Firebase.RTDB.setInt(&fbdo, "Motion", sensorStatus)) {
      Serial.println();
      Serial.print("Saved to" + fbdo.dataPath());
      Serial.println(" (" + fbdo.dataType() + ")");
    } else {
      Serial.println("Failed:" + fbdo.errorReason());
    }
  }



  delay(1000); // Delay before the next iteration
}

void increase() {
  pulse++;
}
